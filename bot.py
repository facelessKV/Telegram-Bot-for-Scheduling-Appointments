import asyncio
import logging
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import Database
from scheduler import AppointmentScheduler
from keyboards import (
    get_services_keyboard, get_cancel_keyboard, 
    get_time_slots_keyboard, get_my_appointments_keyboard
)
from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM (Finite State Machine)
class BookingStates(StatesGroup):
    selecting_service = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    selecting_date = State()     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    selecting_time = State()     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    confirming = State()         # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    cancelling = State()         # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
db = Database('appointments.db')
scheduler = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminder(bot: Bot, user_id: int, service_name: str, date: str, time: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –∑–∞–ø–∏—Å–∏
    """
    await bot.send_message(
        user_id,
        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
        f"–ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ {service_name}\n"
        f"–î–∞—Ç–∞: {date}\n"
        f"–í—Ä–µ–º—è: {time}\n\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    global scheduler
    scheduler = AppointmentScheduler(db)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    @dp.message(Command("start"))
    async def cmd_start(message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞
        """
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/book - –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è\n"
            "/my_appointments - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏\n"
            "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"
        )

    @dp.message(Command("book"))
    async def cmd_book(message: Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /book
        –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        services = db.get_services()
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
        keyboard = get_services_keyboard(services)
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=keyboard)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
        await state.set_state(BookingStates.selecting_service)

    @dp.callback_query(lambda c: c.data.startswith('service_'), BookingStates.selecting_service)
    async def process_service_selection(callback_query: CallbackQuery, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —É—Å–ª—É–≥–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        service_id = int(callback_query.data.split('_')[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–µ
        service = db.get_service_by_id(service_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            service_id=service_id,
            service_name=service['name'],
            duration=service['duration']
        )

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç–æ–ª—å–∫–æ —Ç—É—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from telegram_calendar import create_calendar
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        now = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_markup = create_calendar(
            year=now.year,
            month=now.month,
        )
        
        await callback_query.answer()
        await callback_query.message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {service['name']} (–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {service['duration']} –º–∏–Ω)\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=calendar_markup
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        await state.set_state(BookingStates.selecting_date)

    @dp.callback_query(lambda c: c.data.startswith('calendar'), BookingStates.selecting_date)
    async def process_calendar(callback_query: CallbackQuery, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        """
        from telegram_calendar import process_calendar_selection, create_calendar
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        result, key, step = process_calendar_selection(callback_query.data)
        
        if not result and key:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –º–µ—Å—è—Ü –∏–ª–∏ –≥–æ–¥, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            await callback_query.message.edit_reply_markup(
                reply_markup=key
            )
            return
        
        if result:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–µ–Ω—å
            selected_date = result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
            if selected_date < datetime.now().replace(hour=0, minute=0, second=0, microsecond=0):
                await callback_query.answer(
                    text="–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º!",
                    show_alert=True
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            data = await state.get_data()
            await state.update_data(selected_date=selected_date.strftime("%Y-%m-%d"))
            service_id = data['service_id']
            duration = data['duration']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏ —É—Å–ª—É–≥–∏
            available_slots = scheduler.get_available_slots(
                selected_date, 
                duration
            )
            
            if not available_slots:
                await callback_query.answer()
                await callback_query.message.answer(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
                    reply_markup=create_calendar(
                        year=selected_date.year,
                        month=selected_date.month
                    )
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
            time_slots_markup = get_time_slots_keyboard(available_slots)
            
            await callback_query.answer()
            await callback_query.message.answer(
                f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã:",
                reply_markup=time_slots_markup
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
            await state.set_state(BookingStates.selecting_time)

    @dp.callback_query(lambda c: c.data.startswith('time_'), BookingStates.selecting_time)
    async def process_time_selection(callback_query: CallbackQuery, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        selected_time = callback_query.data.split('_')[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(selected_time=selected_time)
        data = await state.get_data()
        service_name = data['service_name']
        selected_date = data['selected_date']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_date = datetime.strptime(selected_date, "%Y-%m-%d").strftime("%d.%m.%Y")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")
        builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")
        builder.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
        
        await callback_query.answer()
        await callback_query.message.answer(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
            f"–£—Å–ª—É–≥–∞: {service_name}\n"
            f"–î–∞—Ç–∞: {formatted_date}\n"
            f"–í—Ä–µ–º—è: {selected_time}\n\n"
            f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
            reply_markup=builder.as_markup()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.set_state(BookingStates.confirming)

    @dp.callback_query(F.data == "confirm", BookingStates.confirming)
    async def process_confirmation(callback_query: CallbackQuery, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        user_id = callback_query.from_user.id
        user_name = callback_query.from_user.username or f"{callback_query.from_user.first_name} {callback_query.from_user.last_name or ''}"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        service_id = data['service_id']
        service_name = data['service_name']
        selected_date = data['selected_date']
        selected_time = data['selected_time']
        duration = data['duration']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        appointment_datetime = f"{selected_date} {selected_time}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        appointment_id = db.add_appointment(
            user_id=user_id,
            user_name=user_name,
            service_id=service_id,
            appointment_datetime=appointment_datetime,
            duration=duration
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_date = datetime.strptime(selected_date, "%Y-%m-%d").strftime("%d.%m.%Y")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏
        reminder_date = datetime.strptime(appointment_datetime, "%Y-%m-%d %H:%M") - timedelta(days=1)
        scheduler.schedule_reminder(appointment_id, user_id, service_name, formatted_date, selected_time, reminder_date)
        
        await callback_query.answer()
        await callback_query.message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"–£—Å–ª—É–≥–∞: {service_name}\n"
            f"–î–∞—Ç–∞: {formatted_date}\n"
            f"–í—Ä–µ–º—è: {selected_time}\n\n"
            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –ø—Ä–∏–µ–º–∞. "
            f"–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel."
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    @dp.callback_query(F.data == "cancel", BookingStates.confirming)
    async def process_cancel_confirmation(callback_query: CallbackQuery, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤–æ –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """
        await callback_query.answer()
        await callback_query.message.answer(
            "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /book."
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    @dp.message(Command("my_appointments"))
    async def cmd_my_appointments(message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_appointments
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        appointments = db.get_user_appointments(user_id)
        
        if not appointments:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π
        appointments_text = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
        
        for idx, appointment in enumerate(appointments, 1):
            service_name = db.get_service_by_id(appointment['service_id'])['name']
            appointment_datetime = datetime.strptime(appointment['appointment_datetime'], "%Y-%m-%d %H:%M")
            formatted_date = appointment_datetime.strftime("%d.%m.%Y")
            formatted_time = appointment_datetime.strftime("%H:%M")
            
            appointments_text += f"{idx}. {service_name}\n" \
                               f"   –î–∞—Ç–∞: {formatted_date}\n" \
                               f"   –í—Ä–µ–º—è: {formatted_time}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–µ–π
        keyboard = get_my_appointments_keyboard(appointments)
        
        await message.answer(appointments_text, reply_markup=keyboard)

    @dp.callback_query(lambda c: c.data.startswith('cancel_appointment_'))
    async def process_cancel_appointment_button(callback_query: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        appointment_id = int(callback_query.data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        appointment = db.get_appointment_by_id(appointment_id)
        
        if not appointment:
            await callback_query.answer(text="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if appointment['user_id'] != callback_query.from_user.id:
            await callback_query.answer(text="–≠—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
        service = db.get_service_by_id(appointment['service_id'])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        appointment_datetime = datetime.strptime(appointment['appointment_datetime'], "%Y-%m-%d %H:%M")
        formatted_date = appointment_datetime.strftime("%d.%m.%Y")
        formatted_time = appointment_datetime.strftime("%H:%M")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
        builder = InlineKeyboardBuilder()
        builder.button(text="–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_cancel_{appointment_id}")
        builder.button(text="–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data="cancel_confirmation")
        builder.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
        
        await callback_query.answer()
        await callback_query.message.answer(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?\n\n"
            f"–£—Å–ª—É–≥–∞: {service['name']}\n"
            f"–î–∞—Ç–∞: {formatted_date}\n"
            f"–í—Ä–µ–º—è: {formatted_time}",
            reply_markup=builder.as_markup()
        )

    @dp.callback_query(lambda c: c.data.startswith('confirm_cancel_'))
    async def process_confirm_cancel(callback_query: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
        –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        appointment_id = int(callback_query.data.split('_')[2])
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        success = db.delete_appointment(appointment_id)
        
        if success:
            await callback_query.answer()
            await callback_query.message.answer(
                "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞."
            )
        else:
            await callback_query.answer()
            await callback_query.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

    @dp.callback_query(F.data == "cancel_confirmation")
    async def process_cancel_confirmation_cancel(callback_query: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
        –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        await callback_query.answer()
        await callback_query.message.answer(
            "–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–∞—à–∞ –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
        )

    @dp.message(Command("cancel"))
    async def cmd_cancel(message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
        """
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        appointments = db.get_user_appointments(user_id)
        
        if not appointments:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π
        appointments_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:\n\n"
        
        for idx, appointment in enumerate(appointments, 1):
            service_name = db.get_service_by_id(appointment['service_id'])['name']
            appointment_datetime = datetime.strptime(appointment['appointment_datetime'], "%Y-%m-%d %H:%M")
            formatted_date = appointment_datetime.strftime("%d.%m.%Y")
            formatted_time = appointment_datetime.strftime("%H:%M")
            
            appointments_text += f"{idx}. {service_name}\n" \
                               f"   –î–∞—Ç–∞: {formatted_date}\n" \
                               f"   –í—Ä–µ–º—è: {formatted_time}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–µ–π
        keyboard = get_cancel_keyboard(appointments)
        
        await message.answer(appointments_text, reply_markup=keyboard)

    @dp.message()
    async def process_other_messages(message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞
        """
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/book - –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è\n"
            "/my_appointments - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏\n"
            "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"
        )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    asyncio.create_task(scheduler.start_scheduler(lambda user_id, service, date, time: 
                                                send_reminder(bot, user_id, service, date, time)))
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    db.create_tables()
    services = db.get_services()
    if not services:
        db.add_service("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", 30, 1000)
        db.add_service("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", 60, 2000)
        db.add_service("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", 90, 3000)
    
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        await dp.start_polling(bot)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await bot.session.close()
        scheduler.stop_scheduler()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())